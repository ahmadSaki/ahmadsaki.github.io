~~~~~ COMMAND ~~~~~
# Configure username of local repository to git (only for current directory remove '--global')
git config --global user.name "username"
# Configure email of local repository to git (only for current directory remove '--global')
git config --global user.email "email@adress"

# SSH Configuration
# Copy the key from the path C:\Users\User\.ssh\id_ed25519.pub and set into the github to configure SSH
ssh -T git@github.com
ssh-keygen -t ed25519 -C "name@email.com"

git help						# See all of these git command
git init						# Initialize local git repository ('.git' hidden folder will be here)
git status						# Check status of working tree

git add <FilenameWithExtention>				# The file add to Index (Staging area)
git add -f <FilenameWithExtention>			# The file add to Index (Staging area) by force
git add <*.Extention>					# All '.Extention' file(s) add to Index (Staging area)
git add . 						# All file(s) add to Index (Staging area)
git add --a 						# All file(s) add to Index (Staging area)

git rm --cached <FilenameWithExtention>			# Remove the file from Index (Staging area)
git rm -r <FilenameWithExtention>			# Remove the file from Repository

git commit -m "message"					# Commit changes in Index (Staging Area)
git commit --amend --no-edit				# Commit along with previous version
git commit -a-m "message"				# Commit along with previous version

git branch						# Check all of the branches ('* Branchname' means current branch)
git branch <Branchname>					# Create new branch of the repository
git checkout -b <Branchname>				# Create new branch and also make it current working branch
git checkout <Branchname>				# Switch to the branch
git branch -d <Branchname>				# Delete the branch ('-D' will delete unmerge branch also)

git clone <URL>						# Clone repository into a new repository

git remote -v 						# Check remote URL
git remote add origin <URL>				# Add a remote repository
git remote remove origin 				# Delete remote URL
git remote add origin git@github.com:user/repo.git  	# Add a remote repository

git fetch						# Fetch from remote repository
git fetch origin					# Fetch from remote repository
git fetch origin <LocalBranchName>:<RemoteBranchName>	# Fetch from remote repository
git pull						# Pull latest from remote repository

git push -u origin <Branchname>				# Push to remote repository (first time need to use username & password)
git push origin <Branchname>				# Push to remote repository (first time need to use username & password)
git push -f -u orgin <Brandhname>			# Push to remote repository (when git push rejected "non-fast-forward")

git clean -n						# Modified or new (Non-index Or Unstaging ares's file(s)) file(s) will listed
git clean -f						# Modified or new (Non-index Or Unstaging ares's file(s)) file(s) will cleaned forcefully.

git stash -u						# Modified or new file(s) of the repository make clear without commit
git stash list						# Modification stash command can be listed
git stash show						# Inspect the stash list
git stash apply						# Relige from stash stage

git log							# Show the log of this repository
git log --before='DatetimeOrDate'			# Chronological histore of this repository
git log --author='AuthorName'				# Author history of this repository
git log --oneline					# Give list of commits in one line
git reflog						# Reference logs

git revert <CommitID>					# Revert to previous commit
git revert HEAD						# Revert to last commit

git rebase <Branchname>					# Status of up to date branch

git diff --cashed					# Changes of tracked file
git diff						# Differences

git merge FETCH_HEAD -m <Message>			# Integrate remote and local changes
git merge <Branchname>					# The branch will merge with the given branch
git merge <CommitID>					# The branch will merge to the given commit

git cherry-pick <CommitID>				# Cherry-pick to the given commit

ls							# List file(s) in the directory
clear							# Clear command prompt
cat <FilenameWithExtention>				# View inside of the file
mkdir <Directory>					# Make directory in the current directory
touch <Filename>					# Create new file in the directory
gedit <FilenameWithExtention>				# Edit file on different window



~~~~~ Process ~~~~~
Process_01:
	Ignore file and folder from repository
	
	i)	Create <.gitignore> file
	ii)	Open '.gitignore' file using text editor & write down the Filename.Extension, /Foldename
		ex:	log.txt
			/directory
	iii)	The file(s) only ignore from one repository either remote or local (Mostly used in local repository).
	iv)	git config --global <FilenameWithExtention> ~/.gitignore
		command for ignore globally
	v)	echo <FilenameWithExtention> >> .gitignore
		command for ignore the file Or add the file to the .gitignore
	vi)	git check-ignore -v <FilenameWithExtention>
		command is to check this file is ignored for which referance 




~~~~~ ISSUE_FINDING ~~~~~
Issue_01:
	git commit commad without message on git bash command prompt occur a confusing state.

Finding_01:
	Press 'Insert' key, write a message and write <:wq> 


Issue_02:
	fatal: Unable to create 'directory/.git/index.lock': File exists.
	Another git process seems to be running in this repository, e.g.
	an editor opened by 'git commit'. Please make sure all processes
	are terminated then try again. If it still fails, a git process
	may have crashed in this repository earlier:
	remove the file manually to continue.

Finding_02:
	CLI>> rm -f .git/index.lock
	
	Comment: Such problems generally occur when you execute two git commands simultaneously; may be one from the command prompt and another from an IDE.


Issue_03:
	warning: LF will be replaced by CRLF in script/bootstrap.min.js.
	The file will have its original line endings in your working directory
	warning: LF will be replaced by CRLF in style/bootstrap.min.css.
	The file will have its original line endings in your working directory

Finding_03:
	CLI>> git config core.autocrlf true
	
	Comment: For this issue bootstrap does not push to github properly.
	

Issue_04:
	git merge FETCH_HEAD
	fatal: refusing to merge unrelated histories
	
Finding_04:
	CLI>> git merge FETCH_HEAD --allow-unrelated-histories

Issue_05:
	Support for password authentication was removed. Please use a personal access token instead

Finding_05:
	https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to
	
	git remote set-url origin https://<token>@github.com/<username>/<repo>.git
	
	
